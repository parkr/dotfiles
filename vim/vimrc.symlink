set ttyfast
set lazyredraw

filetype off
call pathogen#infect()
filetype plugin indent on
set nocompatible

set enc=utf-8

" ----------------------------------------------------------------------------
"  I've had it with these motherfucking backups, in this motherfucking dir
" ----------------------------------------------------------------------------

set nobackup
set nowritebackup
set noswapfile

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap                 " do not wrap lines
set colorcolumn=+1
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=4
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
set textwidth=75           " wrap at 75 chars by default
set virtualedit=block      " allow virtual edit in visual block
set backspace=2

" ----------------------------------------------------------------------------
"  Folding
" ----------------------------------------------------------------------------

set foldlevelstart=0

nnoremap <Space> za
vnoremap <Space> za

nnoremap zO zCzO

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" bored of having to hit shift
nnoremap ; :

" exit to normal mode with 'jj'
inoremap jj <ESC>


" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> <nop>
nnoremap <Up> <nop>
nnoremap <Left> <nop>
nnoremap <Right> <nop>
vnoremap <Down> <nop>
vnoremap <Up> <nop>
vnoremap <Left> <nop>
vnoremap <Right> <nop>
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                        " show the cursor position all the time
set noshowcmd                    " don't display incomplete commands
set nolazyredraw                 " turn off lazy redraw
set number                       " show line numbers
set wildmenu                     " turn on wild menu
set wildignore+=*/vendor/*       " ignore the vendor directory
set wildignore+=*/node_modules/* " ignore the node_modules directory
set wildignore+=*/bower_components/*
set wildignore+=*.png,*.jpg,*.otf,*.woff,*.jpeg,*.orig
set wildmode=list:longest,full
set ch=2                         " command line height
set whichwrap+=<,>,h,l,[,]       " backspace and cursor keys wrap to
set shortmess=filtIoOA           " shorten messages
set report=0                     " tell us about changes
set nostartofline                " don't jump to the start of line when scrolling

let g:solarized_termcolors=256
syntax on
" set background=light
set background=dark
colorscheme solarized

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch                " brackets/braces that is
set mat=5                    " duration to show matching brace (1/10 sec)
set incsearch                " do incremental searching
set laststatus=2             " always show the status line
set ignorecase               " ignore case when searching
set nohlsearch               " don't highlight searches
set visualbell               " shut the fuck up

let g:Powerline_symbols = 'fancy'
let g:Powerline_cache_enabled = 1

" ----------------------------------------------------------------------------
" Fuzzy finder
" ----------------------------------------------------------------------------

let g:ctrlp_map = '<leader>t'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_user_command = 'fd'

" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace ()
  exec ':%s/ \+$//ge'
endfunction
map <leader>s :call StripWhitespace ()<CR>
autocmd BufWritePre * :call StripWhitespace ()

" ---------------------------------------------------------------------------
" Remap the tab key to do autocompletion or indentation depending on the
" context
" ---------------------------------------------------------------------------

function! RunMakefile ()
  exec ":!make"
endfunction
map <leader>m :call RunMakefile ()<CR>

" ---------------------------------------------------------------------------
" Remap the tab key to do autocompletion or indentation depending on the
" context
" ---------------------------------------------------------------------------
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

"--------------
" RUNNING TESTS
"--------------
function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if match(a:filename, '\.feature') != -1
      exec ":!bundle exec cucumber " . a:filename
    else
      if filereadable("bin/rails")
        exec ":!bin/rails test " . a:filename
      elseif filereadable("script/spec")
        exec ":!script/spec " . a:filename
      elseif filereadable("script/test")
        exec ":!script/test " . a:filename
      elseif filereadable("script/cibuild")
        exec ":!script/cibuild " . a:filename
      elseif match(a:filename, '\.go') != -1
        exec ":!go test"
      elseif match(a:filename, '\.js') != -1
        exec ":!npm test"
      elseif match(a:filename, '_test\.rb') != -1
        exec ":!ruby -I'lib:test' " . a:filename
      elseif match(a:filename, '_spec\.rb') != -1
        exec ":!rspec --color --drb " . a:filename
      end
    end
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction


function! SetTestFileFromTestedFile()
    " Jekyll -- run the corresponding test file.
    if match(expand("%"), '^lib\/jekyll\/\(.*\)') == 0
      let t:grb_test_file = substitute(expand("%"), '^lib\/jekyll\/\(.*\)', 'test/test_\1', 'g')
    end
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.js\|.go\|.feature\|_spec.rb\|_test.rb\)$') != -1 || match(expand("%"), '^test\/test_') == 0
    let in_file_with_test_file = match(expand("%"), '.rb$') != -1

    if in_test_file
        call SetTestFile()
    elseif in_file_with_test_file
        call SetTestFileFromTestedFile()
    end

    if !exists("t:grb_test_file")
        echo "No can do. You're not in a test file."
        return "not in a test file"
    end

    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')

    call RunTestFile(":" . spec_line_number)
endfunction

map <leader>r :call RunTestFile()<CR>
map <leader>T :call RunNearestTest()<CR>

" ----------------------------------------------------------------------------
" Set custom file types and syntaxes
" ----------------------------------------------------------------------------

autocmd Filetype python,go setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
au BufRead,BufNewFile Gomfile setlocal ft=gomfile syntax=ruby
au BufRead,BufNewFile Brewfile setlocal ft=brewfile syntax=ruby
au BufRead,BufNewFile Capfile setlocal ft=capfile syntax=ruby
au BufRead,BufNewFile *.rs setlocal ft=rust syntax=rust
au BufRead,BufNewFile Dockerfile* setlocal ft=dockerfile syntax=dockerfile
au BufRead,BufNewFile *.workflow setlocal ft=terraform syntax=terraform

" Disable ALE on every text change.
let g:ale_lint_on_text_changed = 'never'
" Disable ALE when opening a file.
" let g:ale_lint_on_enter = 0
" Enable ALE completion
let g:ale_completion_enabled = 1

" Re-define the Ruby linter without -T flag
call ale#linter#Define('ruby', {
\   'name': 'ruby',
\   'executable': {b -> ale#Var(b, 'ruby_ruby_executable')},
\   'command': '%e -w -c %t',
\   'output_stream': 'stderr',
\   'callback': 'ale#handlers#ruby#HandleSyntaxErrors',
\})

" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1
let g:ale_linters = {
\   'ruby': ['standardrb'],
\}
let g:ale_fixers = {'ruby': ['standardrb']}
